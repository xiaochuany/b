{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":"<p>subscribe via RSS</p>"},{"location":"2024/12/18/mkdocs-intro/","title":"Technical writing with material for mkdocs","text":"<p>material for mkdocs is a documentation framework adopted by many python libraries e.g. this and this.</p> <p>This tutorial provides a step by step intro to setting up a blog website (such as this one!) with this framework.</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#credit","title":"Credit","text":"<p>template by material team</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#first-steps-to-follow","title":"First steps to follow","text":"<ol> <li><code>pip install mkdocs-material</code></li> <li>initialize docs locally with <code>mkdocs new .</code></li> <li>create empty remote repo and push local to remote</li> <li>[github] add CI config file as per material docs</li> <li>[github] set publish branch to <code>gh-pages</code></li> </ol> <p>After these steps, a site is published and CI should start working. New edits of docs in the main branch would trigger rebuild of the site, i.e. focus on the writing and let robots build the site automatically.</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#customize-the-theme","title":"Customize the theme","text":"<p>In <code>mkdocs.yml</code>, config the theme, then customize it e.g. add dark/light toggle</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#add-blog-plugin","title":"Add blog plugin","text":"<p>Without any setting, the plugin creates a directory structure (<code>/docs/blog/posts</code>).</p> <p>Setting the following should be straightforward</p> <ol> <li>blog_toc</li> <li>archive_date_format</li> <li>categories_allowed</li> <li>pagination_per_page</li> </ol> <p>The <code>post_slugify</code> setting makes use of python markdown extension package, which is a dependency of <code>material</code> and installed with it.</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#add-tags-plugin","title":"Add tags plugin","text":"<p>Add <code>tags</code> plugin in <code>mkdocs.yml</code> and create a file <code>tags.md</code> in <code>docs</code>.</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#add-rss-plugin","title":"Add rss plugin","text":"<p>rss is a third party plugin which requires installation.</p> <p>It is important that have the site_name, site_description and site_url settings configured. The RSS plugin makes use of this information to construct the feed, so make sure you have configured them.</p> <ul> <li><code>pip install mkdocs-rss-plugin</code></li> <li>add rss plugin in  <code>mkdocs.yml</code></li> <li>add the required package also in ci: run <code>pip install mkdocs-rss-plugin</code></li> </ul>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#extra","title":"Extra","text":"<p>such as social media links in the footer</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#markdown-extension-maths","title":"Markdown extension: maths","text":"<p>Add markdown extension for writing maths</p> <ul> <li>add <code>arithmatex</code> extension in <code>mkdocs.yml</code></li> <li>add <code>mathjax.js</code> to extra_javascript (create a js file in <code>docs/js</code>, define macros as needed)</li> </ul> <p>One can use <code>katex</code> instead per documentation.</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#markdown-extension-code-block","title":"Markdown extension: code block","text":"<p>Add necessary markdown extension for writing code.</p> <ul> <li>highlight</li> <li>inlinehilite</li> <li>snippets</li> <li>superfences</li> </ul>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#nav","title":"Nav","text":"<p>Rename nav sidebar and/or turn it into tabs.</p> <p>Add to <code>features</code> in <code>theme</code></p> <ul> <li>navigation.tabs : tabs</li> <li>navigation.indexes : index attached to sections (overview page)</li> </ul> <p>Also add <code>nav</code> section to be explicit what to include in the sidebar/tabs.</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#author","title":"Author","text":"<p>Add author metadata <code>docs/blog/.author.yml</code> and use it in all posts (by specifying <code>authors</code> in the header of posts).</p>","tags":["mkdocs"]},{"location":"2024/12/18/mkdocs-intro/#metadata-of-posts","title":"Metadata of posts","text":"<p>Include metadata in the header of posts:</p> <ul> <li>date (enough)</li> <li>authors</li> <li>tags</li> <li>categories</li> <li>slug (if want to customize)</li> <li>readtime</li> </ul>","tags":["mkdocs"]},{"location":"2024/12/21/polars101/","title":"Essentials of <code>polars</code>","text":"<p>What does a dataframe library do? A few things come to mind. </p> <ul> <li>join/merge</li> <li>group by</li> <li>aggregation</li> <li>windows function</li> <li>rolling windows</li> <li>...</li> </ul> <p>There are a plethora of dataframe libraries in python, <code>polars</code> seems to me a clear winner in the game of \"finding the successor of <code>pandas</code>\". </p> <p>Born in 2020, <code>polars</code> released its version 1.0 in mid-2024, officially marking its production readiness.  A popular saying about <code>polars</code> is that people \"came for the speed, stay for the syntax\".  The API design of <code>polars</code> emphasizes parallelisation and composability, which I find both intuitive and expressive.  </p> <p>The goal of this tutorial is to present some basic concetps for effective use of the library.</p>","tags":["polars"]},{"location":"2024/12/21/polars101/#eager-vs-lazy","title":"Eager vs Lazy","text":"<p>A key concept that differentiates <code>polars</code> from <code>pandas</code> is its \"lazy execution\". Think about this query in the diagram where the input <code>in</code> is processed in some ways to achieve the result <code>out</code>.</p> <pre><code>graph LR\n    A[in] --&gt; B[result1];\n    A --&gt; C[result2];\n    A --&gt; D[result3];\n    C --&gt; D;\n    B --&gt; E[out];\n    D --&gt; E;</code></pre> <p>Eager execution means that data operations are executed sequentially, one after another as user's query, with all the data load into memory and intermediate results stayed in memory. This is both wasteful and inefficient. </p> <p>Lazy execution would mean an abstract execution of opeations without actually loading  the data into memory until the user explicitly requests it. Think of this as composition of functions where no input is required (the schema of the input, not the values, must be known upfront).  The lazy execution model leaves the possibility of optimising user's query by changing the order of certain operations, fusing them, and all sorts of smart tricks that can boost the computation efficiency when data is eventually fed. This is very similar to machine learnig compilers would do (think <code>torch.compile</code> and <code>jax.jit</code>).</p> <p><code>pandas</code> only operates in eager mode, while <code>polars</code> operates on both. The eager API is useful in developement because of its explicitness, while the lazy API useful in production because of its efficiency. The lazy API of <code>polars</code> is almost identical to the eager one so there is little mental overhead to users. </p>","tags":["polars"]},{"location":"2024/12/21/polars101/#parallelism","title":"Parallelism","text":"<p><code>polars</code> embraces parallelism whenever possible. Also, thanks to the Expression API, commands run in parallel are easy to guess/reason about. </p> <p>Take a look at the dependency graph of our mock query again. All the intermediate results depend on the input <code>in</code>. Would it be good if these steps run in parallel? Yes, and this is exactly what <code>polars</code> would do. </p>","tags":["polars"]},{"location":"2024/12/21/polars101/#expression","title":"Expression","text":"<p>So far we've only discussed some design choices. <code>polars</code> offers an Expression API that aligns with these design choices. An expression is a function which associates in 1d array (think: a column in a dataframe) and spits out a </p> <p>Users new to DataFrames</p> <p>A DataFrame is a 2-dimensional data structure that is useful for data manipulation and analysis. With labeled axes for rows and columns, each column can contain different data types, making complex data operations such as merging and aggregation much easier. Due to their flexibility and intuitive way of storing and working with data, DataFrames have become increasingly popular in modern data analytics and engineering.</p> <pre><code>print('hello')\n</code></pre> <pre><code>hello\n</code></pre>","tags":["polars"]},{"location":"archive/2024/","title":"2024","text":""},{"location":"category/tutorial/","title":"Tutorial","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#mkdocs","title":"mkdocs","text":"<ul> <li>Technical writing with material for mkdocs</li> </ul>"},{"location":"tags/#polars","title":"polars","text":"<ul> <li>Essentials of polars</li> </ul>"}]}